<?php

/**
 * @file
 * Audiolock API integration.
 */

/**
 * Implementation of hook_perm().
 */
function audiolock_perm() {
  return array('administer audiolock');
}

/**
 * Implementation of hook_menu().
 */
function audiolock_menu() {
  $items = array();

  $items['admin/settings/audiolock'] = array(
    'title' => 'Audiolock',
    'description' => 'Audiolock global settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('audiolock_admin_settings_form'),
    'access arguments' => array('administer audiolock'),
    'file' => 'audiolock.admin.inc',
  );

  $items['audiolock/download/%/%'] = array(
    'title' => 'Audiolock Download',
    'description' => 'Audiolock download link callback.',
    'page callback' => 'audiolock_download_link_redirect',
    'page arguments' => array(2, 3),
    'access callback' => TRUE, // TODO: Proper perms!!
    //'access arguments' => array('administer audiolock'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Include the Audiolock API request wrapper class.
 */
function audiolock_include() {
  // This will return false if file can't be included for any reason.
  return module_load_include('inc', 'audiolock', 'audiolock');
}

/**
 * Factory function to get Audiolock API reqest class.
 * Also manages static caching of the class.
 *
 * @return
 *   An instance of DrupalAudiolock.
 */
function audiolock_request() {
  static $request;

  if (empty($request)) {
    audiolock_include();
    $request = new DrupalAudiolock();
  }

  return $request;
}

/**
 * Implementation of hook_form_FORM_ID_alter().
 */
function audiolock_form_content_field_edit_form_alter(&$form, &$form_state) {
  if ($form['#field']['module'] == 'audiolock') {
    // Enforce on 1, for field granularity.
    $form['field']['multiple']['#options'] = array(1);
  }
}

/**
 * Implementation of hook_field_info().
 */
function audiolock_field_info() {
  return array(
    'audiolock' => array(
      'label' => t('Audiolock'),
      'description' => t('Audiolock upload field.'),
    ),
  );
}

/**
 * Implementation of hook_field_settings().
 */
function audiolock_field_settings($op, $field) {
  switch ($op) {
    /*case 'form':
      $form = array();
      $form['audiolock_example'] = array(
        '#type' => 'textfield',
        '#label' => 'This is a test field',
        '#description' => 'THSJSDk jkjskjd df djhfdjhf',
      );
      return $form;*/
    case 'database columns':
      // Audiolock unique id hash.
      $columns['audiolock_uid'] = array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'sortable' => TRUE,
        'views' => TRUE,
      );

      return $columns;
    case 'save':
      return array('audiolock_uid');
  }
}

/**
 * Implementation of hook_field().
 */
function audiolock_field($op, &$node, $field, &$items, $teaser, $page) {
  switch ($op) {
    case 'validate':
    break;
    case 'sanitize':
    break;
    case 'presave':
      dpm($items, 'items');
      $validators = array(
        //'audiolock_filetype_validate' => array(),
      );
      if($file = file_save_upload($field['field_name'], $validators)) {
        global $base_url;

        file_move($file, 'audiolock_tmp/' . $file->filename);

        $values = $items[0]['audiolock'];
        // Send file to Audiolock.
        $params = array(
          'artist' => $values['track']['track_artist'], // (required)
          'track_name' => $values['track']['track_name'], // (required)
          'mix_name' => '', // (optional)
          'track_file_name' => $file->filename, // (required)
          'track_file_contents' => $base_url . '/' . audiolock_encode_path($file->filepath), // (required)
          'artwork_file_contents' => '', // (optional)
          'isrc' => '', // (optional)
          'release_date' => '', // (optional)
          'encode' => TRUE, // (optional, Needs to be TRUE)
        );
        dpm($params, 'params');
        $audiolock_uid = audiolock_request()->addTrack($params);
        // Only set this if we have a uid, otherwise field is empty.
        if ($audiolock_uid) {
          dpm($audiolock_uid, 'auid');
          //$items[0]['audiolock_name'] = $values['track']['track_name'];
          // Add our new uid, ready for the field api to save.
          $items[0]['audiolock_uid'] = $audiolock_uid;
        }
        dpm($file);
        // Delete the file after we're done, regardless of whether Audiolock was successful.
        //file_delete($file->filepath);
      }
      else {
        drupal_set_message(t('File upload failed. Your file may exceed the maximum filesize limit.'), 'warning');
      }
    break;
  }
}

/**
 * Validate file extension is compatible with Audiolock.
 * 
 * @param $file
 *   Drupal file object.
 */
function audiolock_filetype_validate(&$file) {
  $errors = array();
  $extension = pathinfo($file->filepath, PATHINFO_EXTENSION);

  if (empty($extension) || !in_array($extension, audiolock_get_available_file_extensions())) {
    $errors[] = t('Only the following audio file types are allowed: @extensions.',
      array('@extensions' => implode(', ', audiolock_get_available_file_extensions())));
  }

  return $errors;
}

/**
 * Encode a filepath for Audiolock.
 * This essentially keeps the path intact, and just encodes the filename.
 *
 * @return
 *   Encoded file path.
 */
function audiolock_encode_path($filepath) {
  $parts = explode('/', $filepath);
  // The last part will be the filename, encode that.
  $encoded_filename = rawurlencode(array_pop($parts));
  // Push it back on the end of the array.
  array_push($parts, $encoded_filename);

  return implode('/', $parts);
}

/**
* Implementation of hook_widget_info().
*/
function audiolock_widget_info() {
  return array(
    'audiolock_widget' => array(
      'label' => t('Default upload'),
      'field types' => array('audiolock'),
      'multiple values' => CONTENT_HANDLE_CORE,
      'callbacks' => array(
        'default value' => CONTENT_CALLBACK_DEFAULT,
      ),
    ),
  );
}

/**
 * Implementation of hook_widget().
 */
function audiolock_widget(&$form, &$form_state, $field, $items, $delta = 0) {
  $audiolock_file_info = !empty($items[$delta]['audiolock_uid']) ? audiolock_request()->getTrack($items[$delta]['audiolock_uid']) : NULL;

  // Set this attribute, so we can get the files.
  $form['#attributes']['enctype'] = 'multipart/form-data';

  $element['audiolock'] = array(
    '#type' => 'fieldset',
    '#title' => check_plain($field['widget']['label']),
  );

  $element['audiolock']['audiolock_file'] = array(
    '#type' => 'file',
    '#attributes' => array(
      'class' => 'audiolock-widget',
    ),
    '#description' => t('Choose a file to upload to Audiolock. If you already have a track saved below, uploading a new file will overwrite the existing one.'),
  );

  $element['audiolock']['track'] = array(
    '#type' => 'fieldset',
    '#title' => t('Track details'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $element['audiolock']['track']['track_artist'] = array(
    '#type' => 'textfield',
    '#title' => t('Artist'),
    '#description' => t('Enter track\'s artist.'),
    '#default_value' => $audiolock_file_info ? $audiolock_file_info->artist : '',
  );
  $element['audiolock']['track']['track_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Track name'),
    '#description' => t('The name you want to use for the track.'),
    '#default_value' => $audiolock_file_info ? $audiolock_file_info->track_name : '',
  );
  /*$element['audiolock']['track']['track_release_date'] = array(
    '#type' => 'textfield',
    '#title' => t('Release date'),
    '#description' => t('The release date of the track.'),
    '#default_value' => $items['track_release_date'],
  );*/
  $element['audiolock']['track']['track_uid'] = array(
    '#type' => 'textfield',
    '#title' => t('Track uid'),
    '#description' => t('The unique track uid; This will only ever be assigned by Audiolock.'),
    '#disabled' => TRUE,
    '#default_value' => $items[$delta]['audiolock_uid'],
  );

  return $element;
}

/**
 * Implementation of hook_field_formatter_info().
 */
function audiolock_field_formatter_info() {
  $info = array();

  $info['stream_link'] = array(
    'label' => t('Audiolock stream link'),
    'field types' => array('audiolock'),
    'multiple values' => CONTENT_HANDLE_CORE,
  );

  if (module_exists('mp3player')) {
    $info['stream_mp3player'] = array(
      'label' => t('Audiolock stream mp3player'),
      'field types' => array('audiolock'),
      'multiple values' => CONTENT_HANDLE_CORE,
    );
  }

  return $info;
}

/**
 * Implementation of hook_content_is_empty().
 *
 */
function audiolock_content_is_empty($item, $field) {
  if (empty($item['audiolock_uid'])) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Callback for download link, to redirect and create an audiolock
 * download link. Otherwise, a credit will be used everytime a page with
 * a link to loaded.
 *
 * @param $track_uid
 * @param $token
 */
function audiolock_download_link_redirect($track_uid, $token) {
  if (!drupal_valid_token($token, 'audiolock_download')) {
    return;
  }

  global $user;

  if ($audiolock_link = audiolock_user_get_download_link($user, $track_uid)) {
    drupal_goto($audiolock_link);
  }
  else {
    drupal_goto();
  }
}

/**
 * @todo.
 *
 * @param $user
 * @param $track
 */
function audiolock_user_get_download_link($user, $track_uid) {
  if (empty($track_uid)) {
    return FALSE;
  }

  $params = array(
    'track' => $track_uid,
    'format' => 1, // 1 - 4. mp3 = 1.
    'recipient_id' => 11434, // TODO: Change this back!!! audiolock_user_get_recipient_id($user),
    'expires' => 7, // 7 - 30 available (days).
  );

  return audiolock_request()->generateDownloadLink($params);
}

function audiolock_format_link($user, $track_uid) {
  //$download_link = 'audiolock/download/' . 'RK8CYFDZIM8OWEKM'; // '0O93HSOH7MQ7HB2F'
  $token = drupal_get_token('audiolock_download');

  return url("audiolock/download/$track_uid/$token");
}

/**
 * Get a users Audiolock recipient id, or create a new id.
 *
 * @param $user
 *   A full user object.
 * @param (bool) $create_new
 *   Create a new recipient_id if ones doesn't exist.
 *
 * @return (int)
 *   A recipient id.
 */
function audiolock_user_get_recipient_id($user, $create_new = TRUE) {
  $recipient_id = db_result(db_query("SELECT recipient_id FROM {audiolock} WHERE uid = %d", $user->uid));

  // If we already have a recipient id for this user, return the row.
  if ($recipient_id) {
    // Just return the recipient_id.
    return $recipient_id;
  }

  if ($create_new) {
    // Create a new recipient if nothing is returned.
    // We might want to add more info to this.
    $params = array(
      'email' => $user->mail,
      'name' => $user->name,
    );
    $new_recipient_id = audiolock_request()->addRecipient($params);

    if ($new_recipient_id) {
      // Create an object for drupal_write_record.
      $record = (object) array(
        'recipient_id' => $new_recipient_id,
        'uid' => $user->uid,
        'created' => time(),
      );
      // Write the record in the audiolock table.
      drupal_write_record('audiolock', $record);

      return $recipient->recipient_id;
    }
  }

  // Otherwise, there is some other issue. Just return FALSE.
  return FALSE;
}

/**
 * Return an array of availble file extensions that can be uploaded.
 */
function audiolock_get_available_file_extensions() {
  return array('mp3');
}

/**
 * Implementation of hook_user().
 */
function audiolock_user($op, &$edit, &$account, $category = NULL) {
  switch ($op) {
    case 'view':
      // Return if this setting is FALSE;
      if (!variable_get('audiolock_user_show_recipient_id', TRUE)) {
        return;
      }
      $recipient_id = audiolock_user_get_recipient_id($account);
      if ($recipient_id) {
        // Add a summary for the recipient_id.
        $account->content['summary']['audiolock'] = array(
          '#type' => 'user_profile_item', 
          '#title' => t('Audiolock'), 
          '#value' => '<p><em>' . t('Recipient ID') . ':</em><strong> ' . check_plain($recipient_id) . '</strong></p>', 
          '#attributes' => array('class' => 'audiolock-user-summary'),
        );
      }
    break;
    case 'delete':
      $recipient_id = audiolock_user_get_recipient_id($account);
      if ($recipient_id) {
        // Delete the users Audiolock recipient account.
        audiolock_request()->deleteRecipients(array('recipient_id' => $recipient_id));
        // Delete users entry from our table.
        db_query("DELETE FROM {audiolock} WHERE uid = %d", $account->uid);
      }
    break;
  }
}

/**
 * Implementation of hook_theme().
 */
function audiolock_theme() {
  return array(
    'audiolock_formatter_stream_link' => array(
      'arguments' => array('element' => NULL),
    ),
    'audiolock_formatter_stream_mp3player' => array(
      'arguments' => array('element' => NULL),
    ),
  );
}

/**
 * Theme an audiolock stream link.
 *
 * Used as a field display formatter.
 */
function theme_audiolock_formatter_stream_link($element) {
  global $user;

  $node = $element['#node'];
  $item = $element['#item'];

  return '<p class="audiolock-download-link">' . l('Download track', audiolock_format_link($user, $item['audiolock_uid'])) . '</p>';
}

/**
 * Theme an audiolock stream mp3player widget.
 * Provided my the mp3player module (http://drupal.org/project/mp3player).
 *
 * Used as a field display formatter.
 */
function theme_audiolock_formatter_stream_mp3player($element) {
  global $user;

  $node = $element['#node'];
  $item = $element['#item'];

  return theme('mp3player', 'Default', audiolock_format_link($user, $item['audiolock_uid']));
}

/**
 * Implementation of hook_cron().
 *
 * Cleans up audio files from the audiolock_tmp directory.
 */
function audiolock_cron() {
  $dir = file_directory_path() . '/audiolock_tmp';

  $it = new DirectoryIterator($dir);

  foreach ($it as $fileInfo) {
    if (!$fileInfo->isDot()) {
      unlink($fileInfo->getRealPath());
    }
  }
}
